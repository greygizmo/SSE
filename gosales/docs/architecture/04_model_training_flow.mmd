%% GoSales Engine - Model Training & Robustness Flow

graph TB
    Start(("Start Training")) --> InitSetup

    subgraph "Initialization"
        InitSetup["Boot training env<br/>gosales/models/train.py (robust)"]
        LoadConfig["Load division config + seeds"]
        InitMLflow["Initialize MLflow run"]
        DataAvailability["Verify feature matrix & labels"]
    end

    subgraph "Feature Policy & Dataset Prep"
        ResolveFeaturePolicy["Resolve feature policy<br/>Full vs SAFE"]
        ApplySafeWindows["Apply SAFE windows<br/>drop short adjacency"]
        CastInputs["Cast categorical encodings<br/>align transformers"]
        SplitSets["Temporal train/validation split"]
        BalanceTargets["Check class balance<br/>optional weighting"]
    end

    subgraph "Training Execution"
        SelectModel["Select estimator<br/>LightGBM or LogReg fallback"]
        ConfigureParams["Configure hyperparameters"]
        CrossValidate["Time-aware CV with purge days"]
        TrainFinal["Train final model on train fold"]
        ComputeShap["Compute SHAP importances"]
    end

    subgraph "Evaluation & Calibration"
        EvalHoldout["Evaluate on validation holdout"]
        CalcMetrics["Capture AUC, Brier, PR-AUC"]
        CalcTopK["Compute Top-K yield tables"]
        CalibrateScores["Calibrate (Platt or Isotonic)"]
        UpdateModelCard["Update model card<br/>metrics + feature policy"]
    end

    subgraph "Robustness Gates"
        PermutationTest["Permutation test<br/>time-bucket shuffle"]
        ShiftGrid["Shift-grid stress<br/>{7,14,28,56} degrade"]
        AdjacencyGate["Adjacency SAFE gate<br/>Full >= SAFE else SAFE"]
        PreqHook["Queue prequential eval update"]
    end

    subgraph "Packaging & Registry"
        PersistArtifacts["Persist model.pkl + feature list"]
        WriteCalibration["Write calibration CSV + plots"]
        LogToMLflow["Log params, metrics, artifacts"]
        RegisterModel["Register version in MLflow registry"]
        EmitOutputs["Emit metrics.json, gains, thresholds"]
    end

    PersistArtifacts --> Success(("Training Success"))

    %% Flow
    Start --> InitSetup
    InitSetup --> LoadConfig --> InitMLflow --> DataAvailability
    DataAvailability --> ResolveFeaturePolicy
    ResolveFeaturePolicy --> ApplySafeWindows --> CastInputs --> SplitSets --> BalanceTargets
    BalanceTargets --> SelectModel --> ConfigureParams --> CrossValidate --> TrainFinal --> ComputeShap
    ComputeShap --> EvalHoldout --> CalcMetrics --> CalcTopK --> CalibrateScores --> UpdateModelCard
    UpdateModelCard --> PermutationTest --> ShiftGrid --> AdjacencyGate --> PreqHook
    PreqHook --> PersistArtifacts --> WriteCalibration --> LogToMLflow --> RegisterModel --> EmitOutputs --> Success

    %% Styling
    classDef init fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
    classDef prep fill:#ede7f6,stroke:#4a148c,stroke-width:2px
    classDef train fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px
    classDef eval fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    classDef robust fill:#fce4ec,stroke:#ad1457,stroke-width:2px
    classDef package fill:#f5f5f5,stroke:#424242,stroke-width:2px
    classDef success fill:#c8e6c9,stroke:#2e7d32,stroke-width:3px

    class InitSetup,LoadConfig,InitMLflow,DataAvailability init
    class ResolveFeaturePolicy,ApplySafeWindows,CastInputs,SplitSets,BalanceTargets prep
    class SelectModel,ConfigureParams,CrossValidate,TrainFinal,ComputeShap train
    class EvalHoldout,CalcMetrics,CalcTopK,CalibrateScores,UpdateModelCard eval
    class PermutationTest,ShiftGrid,AdjacencyGate,PreqHook robust
    class PersistArtifacts,WriteCalibration,LogToMLflow,RegisterModel,EmitOutputs package
    class Success success
